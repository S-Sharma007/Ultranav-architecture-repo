// This Jenkinsfile is used to build, test, and deploy the Spring Petclinic application using Maven and Docker.

pipeline {
    agent any 
    tools {
        Maven 'Maven'
        JDK 'JDK 17' 
    }
    environment {
        APP_NAME = 'spring-petclinic'
        SONAR_PROJECT_KEY = 'S-Sharma007_Ultranav-architecture-repo'
        SONAR_PROJECT_KEY = 'S-Sharma007_Ultranav-architecture-repo' 
        SONAR_ORGANIZATION = 'sharmatech-key' 
        JFROG_MAVEN_REPO = 'mave-repo-libs-release' 
        JFROG_DOCKER_REPO = 'jfrog-docker-repo' 
        DOCKER_IMAGE_NAME = "spring-petclinic"

    }
    stages {
         stage ('SonarCloud Scan') {
            steps {
                withSonarQubeEnv('SonarCloud') {
                    withMaven(mavenLocalRepo: '.repository') {
                        sh "mvn verify sonar:sonar -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.organization=${SONAR_ORGANIZATION}"
                    }
                }
            }

    stages {
        stage ('Build') {
            steps {
                withMaven(mavenLocalRepo: '.repository') {
                    sh "mvn ${MVN_GOALS}"
                }
            }
        }
        stage ('Tag Artifacts') {
            steps {
                script {
                     (env.BRANCH_NAME == 'main') {
                        env.ARTIFACT_TAG = 'latest'
                    } 
                    }
                }
            }
        }
    stage ('Deploy to Artifactory') {
            steps {
                script {
                    def server = MyArtifactory.server 'Artifactory' 
                    def pom = readMavenPom file: 'pom.xml'
                    server.upload(
                        [
                            serverId: 'artifactory',
                            specFile: "artifactory-maven-upload.json"
                        ]
                    )
                    if (env.ARTIFACT_TAG == 'latest') {
                        echo "Deploying Docker Image"
                        sh "docker login -u ${JFROG_USERNAME} -p ${JFROG_PASSWORD} ${JFROG_DOCKER_REPO}"
                        sh "docker build -t ${JFROG_DOCKER_REPO}/${DOCKER_IMAGE_NAME}:${env.ARTIFACT_TAG} ."
                        sh "docker push ${JFROG_DOCKER_REPO}/${DOCKER_IMAGE_NAME}:${env.ARTIFACT_TAG}"
                    }
                }
            }
          }        
        }
     }
 }
