pipeline {
    agent any
    
    tools {
        maven "maven"
        jdk 'jdk 17'   
    }
    
    environment {
        Sonar_Token = credentials('SONAR_TOKEN')
        ARTIFACTORY_REPO = 'petclinicbuild/' 
        APP_NAME = 'spring-petclinic' 
        ECR_REPO_URL = '194722422083.dkr.ecr.ap-southeast-2.amazonaws.com'
        DOCKER_IMAGE_TAG = 'latest'
        AWS_DEFAULT_REGION = 'ap-southeast-2'
        IMAGE_NAME = 'petclinic'
        IMAGE_TAG = 'latest'
    }
    
     stage('SonarCloud Analysis') {
            steps {
                script {
                    sh '''
                        mvn clean verify sonar:sonar \
                        -Dsonar.projectKey=S-Sharma007_Ultranav-architecture-repo \
                        -Dsonar.organization=sharmatech-key \
                        -Dsonar.host.url=https://sonarcloud.io \
                        -Dsonar.login=$SONAR_TOKEN
                    '''
                }
            }
        
      stages {
        stage('Checkout') {
            steps {
                git branch: 'main', 
                url: 'https://github.com/S-Sharma007/Ultranav-architecture-repo.git',
                credentialsId: 'github_creds'  
            }
        }
        
        stage('Petclinic Build with Maven') {
            steps {
                  sh 'mvn package -DskipTests=true -X ' 
            }
        }

        stage('Configure Artifactory') {
            steps {
                rtServer (
                    id: 'petclinicbuild',
                    url: 'https://trisha.jfrog.io/artifactory',
                    credentialsId: 'Jfrog-credentialv2'
                )
            }
        }

        stage('Pushing Build to JFrog Artifactory') {
            steps {
                rtUpload (
                    serverId: 'petclinicbuild', 
                    spec: """
                        {
                          "files": [
                            {
                              "pattern": "target/*.jar",
                              "target": "${ARTIFACTORY_REPO}${APP_NAME}/"
                            }
                          ]
                        }
                    """
                )
            }
        }

        stage('Build a Docker Image') {
            steps {
                script {
                     "docker build -t petclinic ."
                     "docker tag petclinic:latest ${ECR_REPO_URL}/petclinic:${DOCKER_IMAGE_TAG}"
                }
            }
        }
        
         stage('Push Docker Image to ECR') {
            steps {
                script {
                    sh """
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_REPO_URL}
                        docker push ${ECR_REPO_URL}/${IMAGE_NAME}:${IMAGE_TAG}
                    """
                }
            }
        }
    }

}
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
